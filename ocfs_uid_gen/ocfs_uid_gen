#!/bin/sh

#
# ocfs_uid_gen - Generate a GUID for an OCFS node.
# 
# The GUID for an OCFS node is a 128 bit quantity.  The first 80 bits
# are called the "host portion"  This portion is unique per node, and
# remains with a node for its lifetime in the cluster.  The remaining
# 48 bits are the MAC address of the interface used for cluster IPC.
# If a node's MAC address changes due to a change of interface or the
# replacement of a NIC, the host portion of the GUID remains the same,
# but the MAC portion of the GUID is updated to reflect the new
# hardware.
#
# Usage: ocfs_uid_gen -c [-f]
#        ocfs_uid_gen -r
#        ocfs_uid_gen -h
#
#        The '-c' option specifies creation of a new GUID.  The new
#        GUID will contain a new host portion and the MAC address
#        for the IP address contained in the ocfs.conf file.  If a
#        GUID already exists in the ocfs.conf file, the '-f' option is
#        required to overwrite it.
#
#        The '-r' option specifies recovery of the GUID.  The existing
#        GUID in ocfs.conf will be updated, retaining the host portion
#        and changing the MAC address to the MAC for the IP address
#        contained in the ocfs.conf file.
#
# Copyright (C) 2002 Oracle Corporation.  All rights reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have recieved a copy of the GNU General Public
# License along with this program; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 021110-1307, USA.
#
# Author: Joel Becker
#


# Force LC_ALL=C for proper ifconfig(8) parsing
export LC_ALL=C

#
###################################################################
# Variables
#
CONFIG="/etc/ocfs.conf"



#
###################################################################
# Functions
#

# Print usage and exit
print_usage()
{
    RC="$1"

    if [ "$RC" != "0" ]
    then
        exec 1>&2
    fi

cat <<EOCAT
Usage: ocfs_uid_gen -c
       ocfs_uid_gen -r

       -c    Create a new GUID for a new node before it enters the
             cluster.
       -r    Recover the GUID, inserting the new MAC address.  This
             operation is only for existing nodes whose MAC address
             has changed.
EOCAT

    exit $RC
}

# Output
msg()
{
    echo "ocfs_uid_gen: $@"
}

log()
{
    echo "ocfs_uid_gen: $@" >&2
}

# Output and exit
die()
{
    log "$@"
    exit 1
}

# Strip leading spaces
lead_strip()
{
    LINE="$@"
    NEWLINE="${LINE# }"
    while [ "$LINE" != "$NEWLINE" ]
    do
        LINE="$NEWLINE"
        NEWLINE="${LINE# }"
    done

    echo "$LINE"
}

# Strip trailing spaces
tail_strip()
{
    LINE="$@"
    NEWLINE="${LINE% }"
    while [ "$LINE" != "$NEWLINE" ]
    do
        LINE="$NEWLINE"
        NEWLINE="${LINE% }"
    done

    echo "$LINE"
}

# Generate the 80 bits of host portion
generate_bits()
{
    dd if=/dev/urandom bs=1 count=20 2>/dev/null | trdev/null
}

# Find the MAC address of a given IP
grab_mac()
{
    IP="$1"
    if [ -z "$IP" ]
    then
        return 1
    fi

    CUR_MAC=""
    ifconfig 2>/dev/null | while read -r LINE
    do
        case "$LINE" in
        *HWaddr\ *)
            CUR_MAC="${LINE##*HWaddr }"
            ;;
        *\ addr:"$IP"\ *)
            if [ -n "$CUR_MAC" ]
            then
                echo "$CUR_MAC" | sed -e 's/://g'
		return
            fi
            ;;
        "")
            CUR_MAC=""
            ;;
        *)
            ;;
        esac
    done
}

# Load the relevant bits of the configuration
load_config()
{
    if [ ! -f "$CONFIG" -o ! -r "$CONFIG" ]
    then
        log "Unable to read configuration file \"$CONFIG\""
        return 1
    fi

    while read -r RAWLINE
    do
        LINE="`lead_strip "$RAWLINE"`"
        LINE="`tail_strip "$LINE"`"
        case "$LINE" in
        \#*)
            ;;
        "")
            ;;
        *=*)
            PARM="`tail_strip "${LINE%%=*}"`"
            VALUE="`lead_strip "${LINE#*=}"`"
            if [ -z "$PARM" ]
            then
                log "Invalid config line: \"$RAWLINE\""
                return 1
            fi
            case "$PARM" in
            *[\ :/-]*)
                log "Invalid module parameter name: \"$PARM\""
                return 1
                ;;
            guid)
                echo "ORIGGUID=$VALUE"
                ;;
            ip_address)
                echo "IP=$VALUE"
                ;;
            *)
                ;;
            esac
            ;;
        *)
            log "Invalid config line: \"$RAWLINE\""
            return 1
            ;;
        esac
    done < "$CONFIG"

    return 0
}


#
##################################################################
# Main program
#

if [ "$#" -lt 1 -o -z "$1" ]
then
    print_usage 0
fi

OPER=""
FORCE=""
case "$1" in
-c)
    OPER=create
    if [ "$#" -gt 1 ]
    then
        if [ "$2" = "-f" ]
        then
            FORCE="true"
        else
            print_usage 1
        fi
    fi
    ;;
-r)
    OPER=recover
    ;;
*)
    print_usage 1
    ;;
esac

CONFIG_STR="`load_config`"
if [ -z "$CONFIG_STR" -o "$?" != 0 ]
then
    die "Unable to load configuration"
fi
eval "$CONFIG_STR"

if [ -z "$IP" ]
then
    die "IP address not in the confiugration file"
fi

MAC="`grab_mac "$IP"`"
if [ -z "$MAC" -o "$?" != 0 ]
then
    die "Unable to find MAC address for the IP $IP"
fi

if [ "$OPER" = "create" ]
then
    if [ -n "$ORIGGUID" -a "$FORCE" != "true" ]
    then
        die "There is already a GUID in the configuration file $CONFIG.
	Specify the '-f' option to overwrite the existing GUID."
    fi

    GUID="`generate_bits`"
    if [ -z "$GUID" -o "`expr length "$GUID"`" != "20" ]
    then
        die "Unable to generate a valid host portion of the GUID"
    fi

    GUID="${GUID}${MAC}"
elif [ "$OPER" = "recover" ]
then
    if [ -z "$ORIGGUID" -o "`expr length "$ORIGGUID"`" != "32" ]
    then
        die "The original GUID is missing or corrupt.  Recovery cannot
	take place."
    fi

    if [ "${ORIGGUID%$MAC}" != "$ORIGGUID" ]
    then
        msg "The GUID is already correct.  No action taken."
        exit 0
    fi

    GUID="`expr substr "$ORIGGUID" 1 20`"
    GUID="${GUID}${MAC}"
else
    die "BUG!  Invalid operation: \"$OPER\""
fi

msg "The new GUID is $GUID"
TMPNAM="/etc/ocfs_uid_gen$$`date +%Y%m%d%H%M%S`"
mkdir -m 0700 "$TMPNAM" 2>/dev/null
if [ "$?" != 0 ]
then
    die "Unable to create temporary files"
fi

OUTNAM="${CONFIG##*/}"
OUTNAM="${TMPNAM}/${OUTNAM}"

sed -e 's/^[ 	]*guid[ 	]*=.*$/	guid = '"$GUID"'/' < "$CONFIG" > "${OUTNAM}"
ERROR=$?

if [ ! -f "$OUTNAM" -o ! -r "$OUTNAM" -o ! -s "$OUTNAM" ]
then
    ERROR=1
fi
if ! grep "^	guid = $GUID" "$OUTNAM" 1>/dev/null 2>&1
then
    if ! grep "^[ 	]*guid[ 	]*=" "$CONFIG" 1>/dev/null 2>&1
    then
        echo "	guid = $GUID" >> "$OUTNAM"
        if ! grep "^	guid = $GUID" "$OUTNAM" 1>/dev/null 2>&1
        then
            ERROR=1
        fi
    else
        ERROR=1
    fi
fi
if [ "$ERROR" != 0 ]
then
    rm -rf "$TMPNAM" 2>/dev/null
    die "Unable to create temporary files"
fi

BAKNAM="${CONFIG}.bak""`date +%Y%m%d%H%M%S`"
if [ -L "$BAKNAM" ]
then
    rm -rf "$TMPNAM" 2>/dev/null
    die "Backup name \"$BAKNAM\" is a link.  Is this an attack?"
fi

\cp -ip "$CONFIG" "$BAKNAM" 2>/dev/null
if [ "$?" != 0 ]
then
    rm -rf "$TMPNAM" 2>/dev/null
    die "Unable to backup $CONFIG"
fi
if ! diff -q "$CONFIG" "$BAKNAM" >/dev/null 2>&1
then
    rm -rf "$BAKNAM" "$TMPNAM" 2>/dev/null
    die "Unable to backup $CONFIG"
fi

\mv -f "$OUTNAM" "$CONFIG" 2>/dev/null
ERROR=$?

rm -rf "$TMPNAM"
if [ "$ERROR" = 0 ]
then
    exit 0
fi

# From here on, it's error recovery

log "Unable to install new configuration"
\cp -fp "$BAKNAM" "$CONFIG" 2>/dev/null
ERROR="$?"
if [ "$ERROR" = 0 ]
then
    diff -q "$BAKNAM" "$CONFIG" >/dev/null 2>&1
    ERROR=$?
fi

if [ "$ERROR" = 0 ]
then
    die "Original configuration file restored"
else
    die "Unable to restore original configuration file.  Backup is $BAKNAM"
fi
