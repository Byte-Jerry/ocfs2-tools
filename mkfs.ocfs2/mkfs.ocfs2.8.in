.TH "mkfs.ocfs2" "8" "July 2008" "Version @VERSION@" "OCFS2 Manual Pages"
.SH "NAME"
mkfs.ocfs2 \- Creates an \fIOCFS2\fR file system.
.SH "SYNOPSIS"
\fBmkfs.ocfs2\fR [\fB\-b\fR \fIblock\-size\fR] [\fB\-C\fR \fIcluster\-size\fR] [\fB\-L\fR \fIvolume\-label\fR] [\fB\-M\fR \fImount-type\fR] [\fB\-N\fR \fInumber\-of\-nodes\fR] [\fB\-J\fR \fIjournal\-options\fR] [\fB\-\-fs\-features=\fR\fI[no]sparse...\fR] [\fB\-\-fs\-feature\-level=\fR\fIfeature\-level\fR] [\fB\-T\fR \fIfilesystem\-type\fR] [\fB\-FqvV\fR] \fIdevice\fR [\fIblocks-count\fI]
.SH "DESCRIPTION"
.PP
\fBmkfs.ocfs2\fR is used to create an \fIOCFS2\fR file system on a \fIdevice\fR,
usually a partition on a shared disk. In order to prevent data loss,
\fBmkfs.ocfs2\fR will not format an existing \fIOCFS2\fR volume if that
volume is mounted on any node in the cluster. This tool requires the \fIO2CB\fR
cluster service to be up.

.SH "OPTIONS"
.TP
\fB\-b, \-\-block\-size\fR \fIblock\-size\fR
Valid block size values are 512, 1K, 2K and 4K bytes per block. If
omitted, a value will be heuristically determined based on the
expected usage of the file system (see the \fB\-T\fR option). A block
size of 512 bytes is never recommended. Choose 1K, 2K or 4K.

.TP
\fB\-C, \-\-cluster\-size\fR \fIcluster\-size\fR
Valid cluster size values are 4K, 8K, 16K, 32K, 64K, 128K, 256K, 512K
and 1M. If omitted, a value will be heuristically determined based on
the expected usage of the file system (see the \fB\-T\fR option). For
volumes expected to store large files, like database files, while a
cluster size of 128K or more is recommended, one can opt for a smaller
size as long as that value is not smaller than the database block size.
For others, use 4K.

.TP
\fB\-F, \-\-force\fR
For existing \fIOCFS2\fR volumes, \fImkfs.ocfs2\fR ensures the volume
is not mounted on any node in the cluster before formatting. For that to
work, \fImkfs.ocfs2\fR expects the \fIO2CB\fR cluster service to be running.
Specify this option to disable this check.

.TP
\fB\-J, \-\-journal-options\fR \fIoptions\fR
Create the journal using options specified on the command\-line. Journal
options are comma separated, and may take an argument using the equals
('=') sign. The following options are supported:
.RS 1.2i
.TP
\fBsize\fR=\fIjournal\-size\fR
Create a journal of size \fIjournal\-size\fR. Minimum size is 4M.
If omitted, a value is heuristically determined by the file system size.
.RE
.RS 1.2i
.TP
\fBblock32\fR
Use a standard 32bit journal.  The journal will be able to access up to
2^32-1 blocks.  This is the default.  It has been the journal format for
\fIOCFS2\fR volumes since the beginning.  The journal is compatible with
all versions of \fIOCFS2\fR.  Prepending \fBno\fR is equivalent to the
\fBblock64\fR journal option.
.RE
.RS 1.2i
.TP
\fBblock64\fR
Use a 64bit journal.  The journal will be able to access up to 2^64-1
blocks.  This allows large filesystems that can extend to the
theoretical limits of \fIOCFS2\fR.  It requires a new-enough filesystem
driver based on JBD2.  Prepending \fBno\fR is equivalent to the
\fBblock32\fR journal option.
.RE

.TP
\fB\-L, \-\-label\fR \fIvolume\-label\fR
Set the volume label for the file system. This is
useful for mounting\-by\-label. Limit the label to under 64 bytes.

.TP
\fB\-M, \-\-mount\fR \fImount\-type\fR
Valid types are \fIlocal\fR and \fIcluster\fR. Local mount allows users
to mount the volume without the cluster overhead and works only with \fIOCFS2\fR
bundled with Linux kernels 2.6.20 or later. Defaults to \fIcluster\fR.

.TP
\fB\-N, \-\-node\-slots\fR \fInumber\-of\-node\-slots\fR
Valid number ranges from 1 to 255. This number specifies the maximum
number of nodes that can concurrently mount the partition. If omitted,
the number defaults to 4. This number can be later increased using \fItunefs.ocfs2\fR.

.TP
\fB\-T\fR \fIfilesystem\-type\fR
Specify how the filesystem is going to be used, so that mkfs.ocfs2 can
chose optimal filesystem parameters for that use. The supported
filesystem types are:
.RS 1.2i
.TP
\fBmail\fR
Appropriate for file systems which will have many meta data
updates. Creates a larger journal.
.RE
.RS 1.2i
.TP
\fBdatafiles\fR
Appropriate for file systems which will host a relatively small number
of very large files. A small journal is selected. Cluster size will be
at least 128K.
.RE

.TP
\fB\-\-fs\-features=\fR\fR\fI[no]sparse...\fR
Turn specific file system features on or off. A comma separated list of feature flags can be provided, and mkfs.ocfs2 will try to create the file system with those features set according to the list. To turn a feature on, include it in the list. To turn a feature off, prepend \fBno\fR to the name. Choices here will override individual features set via the \fB\-\-fs\-feature\-level\fR option.
The following flags are supported:
.RS 1.2i
.TP
\fBbackup-super\fR
\fBmkfs.ocfs2\fR, by default, makes up to 6 backup copies of the super block at offsets 1G, 4G, 16G, 64G, 256G and 1T depending on the size of the volume.  This can be useful in disaster recovery. This feature is fully compatible with all versions of the file system and generally should not be disabled.
.RE
.RS 1.2i
.TP
\fBlocal\fR
Create the file system as a local mount, so that it can be mounted without a cluster stack. Available with the file system bundled with Linux kernels 2.6.20 and later.
.RE
.RS 1.2i
.TP
\fBsparse\fR
Enable support for sparse files. With this, \fIOCFS2\fR can avoid allocating (and zeroing) data to fill holes. Turn this feature on if you can, otherwise extends and some writes might be less performant. Available with the file system bundled with Linux kernels 2.6.22 and later.
.RE
.RS 1.2i
.TP
\fBunwritten\fR
Enable unwritten extents support. With this turned on, an application can request that a range of clusters be pre-allocated within a file. \fIOCFS2\fR will mark those extents with a special flag so that expensive data zeroing doesn't have to be performed. Reads and writes to a pre-allocated region act as reads and writes to a hole, except a write will not fail due to lack of data allocation. This feature requires \fBsparse\fR file support to be turned on. Available with the file system bundled with Linux kernels 2.6.23 and later.
.RE
.RS 1.2i
.TP
\fBinline-data\fR
Enable inline-data support. If this feature is turned on, /fIOCFS2/fR will store small files and directories inside the inode block. Data is transparently moved out to an extent when it no longer fits inside the inode block. In some cases, this can also make a positive impact on cold-cache directory and file operations. Available with the file system bundled with Linux kernels 2.6.24 and later.
.RE
.RS 1.2i
.TP
\fBextended-slotmap\fR
The slot-map is a hidden file on an \fIOCFS2\fR fs which is used to map mounted nodes to system file resources. The extended slot map allows a larger range of possible node numbers, which is useful for userspace cluster stacks. This feature is automatically turned on when needed, thus users have no need to turn this on manually. Available in the file system bundled with Linux kernels 2.6.27 and later.
.RE
.RS 1.2i
.TP
\fBxattr\fR
Enable support for extended attribute. ACLs and security linux based on this feature.
.RE

.TP
\fB\-\-fs\-feature\-level=\fR\fR\fIfeature\-level\fR
Choose from a set of pre-determined file-system features. This option is designed to allow users to conveniently choose a set of file system features which fits their needs. There is no downside to trying a set of features which your module might not support - if it won't mount the new file system simply reformat at a lower level. Feature levels can be fine-tuned via the \fB\-\-fs\-features\fR option. Currently, there are 3 types of feature levels:
.RS 1.2i
.TP
\fBmax-compat\fR
Chooses fewer features but ensures that the file system can be mounted from older versions of the \fIOCFS2\fR module.
.RE
.RS 1.2i
.TP
\fBdefault\fR
The default feature set tries to strike a balance between providing new features and maintaining compatibility with relatively recent versions of \fIOCFS2\fR. It currently enables \fBsparse\fR, \fBunwritten\fR and \fBinline-data\fR.
.RE
.RS 1.2i
.TP
\fBmax-features\fR
Choose the maximum amount of features available. This will typically provide the best performance from \fIOCFS2\fR at the expense of creating a file system that is only compatible with very recent versions of the \fIOCFS2\fR kernel module.
.RE

.TP
\fB\-\-no-backup-super\fR
This option is deprecated, please use \fB--fs-features=nobackup-super\fR instead.

.TP
\fB\-q, \-\-quiet\fR
Quiet mode.

.TP
\fB\-v, \-\-verbose\fR
Verbose mode.

.TP
\fB\-V, \-\-version\fR
Print version and exit.

.TP
\fIblocks-count\fR
Usually \fBmkfs.ocfs2\fR automatically determines the size of the given device
and creates a file system that uses all of the available space on the
device.  This optional argument specifies that the file system should only
consume the given number of file system blocks (see \fB-b\fR) on the device.

.SH "SEE ALSO"
.BR debugfs.ocfs2(8)
.BR fsck.ocfs2(8)
.BR tunefs.ocfs2(8)
.BR mounted.ocfs2(8)
.BR ocfs2console(8)
.BR o2cb(7)

.SH "AUTHORS"
Oracle Corporation

.SH "COPYRIGHT"
Copyright \(co 2004, 2008 Oracle. All rights reserved.
