#! /bin/sh
# init fragment for ocfs
#
# chkconfig: 2345 24 20
# description: Setup OCFS environment

#
# Note that the start priority is 24.  This is precisely one less than
# the start priority for netfs (25).  This is because we expect OCFS
# volumes to be mounted in the netfs start.
#
# All OCFS volumes that are to be mounted at boot need to have the
# '_netdev' option added to their fstab entry.  This prevents them
# from trying to mount before this script has run.
#


# Force LC_ALL=C for proper ifconfig(8) parsing
export LC_ALL=C


# Source init.d functions
. /etc/init.d/functions

# Source networking configuration
. /etc/sysconfig/network

case "`basename $0`" in
*ocfs)
    MODNAME=ocfs
    FSNAME=OCFS
    LOAD_OCFS=/sbin/load_ocfs
    ;;
*ocfs2)
    MODNAME=ocfs2
    FSNAME=OCFS2
    LOAD_OCFS=/sbin/load_ocfs2
    ;;
*)
    echo -n "Checking for OCFS version: "
    failure $"OCFS version is bad;"
    echo
    exit 1
esac

if ! test -x "$LOAD_OCFS"; then
    echo -n "Checking for $LOAD_OCFS: "
    failure $"$LOAD_OCFS does not exist;"
    echo
    exit 1
fi

KVER="`uname -r`"
case "$KVER" in
2.4.9-e.*)
    BASE_VER=2.4.9-e
    BASE_STR=2.4.9-e
    ;;
2.4.18-e.*)
    BASE_VER=2.4.18-e
    BASE_STR=2.4.18-e
    ;;
2.4.21-*.EL*)
    BASE_VER=2.4.21-
    BASE_STR=2.4.21-EL
    ;;
2.4.20-18.10.*)
    # Oracle's shared-ieee1394 demo kernels
    BASE_VER=2.4.20-18.10
    BASE_STR=2.4.20-18.10
    ;;
*)
    echo -n "Checking for Red Hat enterprise kernel: "
    failure $"Kernel ${KVER} is not a Red Hat enterprise release;"
    echo
    exit 1
    ;;
esac

check_ver()
{
    VERNUM="$1"
    case "$VERNUM" in
    [0-9])
        ;;
    [1-9][0-9])
        ;;
    [1-9][0-9][0-9])
        ;;
    *)
        echo -n "Checking for Red Hat enterprise kernel: "
        failure $"Kernel ${KVER} is not a Red Hat enterprise release;"
        echo
        exit 1
        ;;
    esac
}

EVER="${KVER#${BASE_VER}}"
ETYPE=""
case "$EVER" in
*hugemem)
    ETYPE=hugemem
    ;;
*smp)
    ETYPE=smp
    ;;
*enterprise)
    if test "$BASE_VER" = "2.4.9-e"
    then
        ETYPE=enterprise
    fi
    ;;
*summit)
    if test "$BASE_VER" = "2.4.9-e"
    then
        ETYPE=summit
    fi
    ;;
*[0-9])
    ETYPE=up
    ;;
*[0-9].EL)
    # UP on RHEL 3
    ETYPE=up
    ;;
*[0-9].ELorafw*)
    # UP on RHEL 3 orafw
    check_ver "${EVER#*orafw}"
    ETYPE=up
    ;;
esac

if test -z "$ETYPE"
then
    echo -n "Checking for Red Hat enterprise kernel: "
    failure $"Kernel ${KVER} is not a Red Hat enterprise release;"
    echo 
    exit 1
fi

case "$EVER" in
*.EL)
    EVER="${EVER%.EL}"
    ;;
*)
    ;;
esac

if test "$ETYPE" = "up"
then
    ETYPE=""
fi
case "$BASE_STR" in
2.4.21-EL)
    case "$EVER" in
    *ELorafw*)
        EVER="${EVER%${ETYPE}}"
        check_ver "${EVER#*orafw}"
        EVER="${EVER%.ELorafw*}"
        ;;
    *)
        EVER="${EVER%.EL${ETYPE}}"
        ;;
    esac
    ;;
*)
    EVER="${EVER%${ETYPE}}"
    ;;
esac

EMAJOR=0
EMINOR=0
EMICRO=0
EVER="${EVER#.}"
EMAJOR="${EVER%%.*}"
check_ver $EMAJOR
ETMP="${EVER#${EMAJOR}}"
ETMP="${ETMP#.}"
if test -n "$ETMP"
then
    EMINOR="${ETMP%%.*}"
    check_ver $EMINOR
    ETMP="${ETMP#${EMINOR}}"
    ETMP="${ETMP#.}"
fi
if test -n "$ETMP"
then
    EMICRO="${ETMP%%.*}"
    check_ver $EMICRO
    ETMP="${ETMP#${EMICRO}}"
    ETMP="${ETMP#.}"
fi
if test -n "$ETMP"
then
    echo -n "Checking for Red Hat enterprise kernel: "
    failure $"Kernel ${KVER} is not a Red Hat enterprise release;"
    echo
    exit 1
fi

# This is for path happiness...
if test "$ETYPE" != ""
then
    ETYPE="${ETYPE}-"
fi
MODPATH="/lib/modules/${KVER}/kernel/drivers/addon/${MODNAME}"
case "$BASE_STR" in
2.4.9-e)
    if test "${EMAJOR}" -gt 23
    then
        OBJPATH="/lib/modules/${BASE_STR}-${ETYPE}ABI/${MODNAME}"
    else
        OBJPATH="/lib/modules/${BASE_STR}-${ETYPE}ABI/${MODNAME}-noaio"
    fi
    ;;
2.4.18-e)
    OBJPATH="/lib/modules/${BASE_STR}-${ETYPE}ABI/${MODNAME}"
    ;;
2.4.21-EL)
    OBJPATH="/lib/modules/${BASE_STR}-${ETYPE}ABI/${MODNAME}"
    ;;
2.4.20-18.10)
    OBJPATH="/lib/modules/${BASE_STR}-${ETYPE}ABI/${MODNAME}"
    ;;
*)
    echo -n "Checking for Red Hat enterprise kernel: "
    failure $"Can't get here! (Kernel ${KVER});"
    echo
    exit 1
esac

test -r "${OBJPATH}/${MODNAME}.o" || exit 0


fstab_check()
{
    # Are there any volumes to mount?
    ANY="`awk '/^[  ]*#/{next}$4 ~ /^noauto$|^noauto,|,noauto$/{next}$3 == "ocfs"{print $2}' /etc/fstab 2>/dev/null`"
    test -z "$ANY" && return
      
    # Check if anything is missing netdev
    ANY="`awk '/^[  ]*#/{next}$4 ~ /^noauto$|^noauto,|,noauto$/{next}$4 ~ /^_netdev$|^_netdev,|,_netdev$/{next}$3 == "ocfs"{print $2}' /etc/fstab 2>/dev/null`"
    test -n "$ANY" && echo "Warning: ${FSNAME} filesystems missing \"_netdev\" option: $ANY"
}

module_link()
{
    if test -L "${MODPATH}/${MODNAME}.o"
    then
        LINKTARGET="`ls -l "${MODPATH}/${MODNAME}.o" 2>/dev/null | sed -e 's/^.* -> //'`"
        case "${LINKTARGET}" in
        ${OBJPATH}/${MODNAME}.o)
            return
            ;;
        ${OBJPATH%-noaio}/${MODNAME}.o)
            ;;
        ${OBJPATH}-noaio/${MODNAME}.o)
            ;;
        *)
            return
            ;;
        esac
        rm -f "${MODPATH}/${MODNAME}.o"
    fi

    echo -n "Linking ${FSNAME} module into the module path "

    # Same deal for modules that are physically there
    if test -f "${MODPATH}/${MODNAME}.o" ; then
        EXISTVER="`modinfo "${MODPATH}/${MODNAME}.o" | awk '/description.*version/{sub(/^.*\(version /, ""); sub(/\)"$/, ""); print;}'`"
        if test -n "${EXISTVER}" ; then
            ABIVER="`modinfo "${OBJPATH}/${MODNAME}.o" | awk '/description.*version/{sub(/^.*\(version /, ""); sub(/\)"$/, ""); print;}'`"

            echo
            echo "Leaving existing ${MODNAME} module in place (ABI module version $ABIVER, existing module version $EXISTVER)"
            success
            echo
            return
        else
            # The existing module is too old - pre-ABI packaging
            echo
            echo "Warning: Moving ancient ${MODNAME}.o out of the way"
            mv -f "${MODPATH}/${MODNAME}.o" "${MODPATH}/${MODNAME}.o.preABI" >/dev/null 2>&1
            if test "$?" != 0 ; then
                failure $"Unable to move ancient ${MODNAME} module out of the way;"
                echo
                exit 1
            fi
        fi
    fi

    if test ! -d "$MODPATH" ; then
        if test -e "${MODPATH}"; then
            failure $"Path \"${MODPATH}\" already exists, but is not a directory;"
            echo
            exit 1
        else
            mkdir -p "$MODPATH" >/dev/null 2>&1
            if test $? != 0; then
                failure $"Unable to create directory \"${MODPATH}\";"
                echo
                exit 1
            fi
        fi
    fi

    ln -s "${OBJPATH}/${MODNAME}.o" "${MODPATH}/${MODNAME}.o" >/dev/null 2>&1
    if test $? != 0; then
        failure $"Unable to create symbolic link \"${MODPATH}/${MODNAME}.o\";"
        echo
        exit 1
    fi

    success
    echo
}

case "$1" in
    start)
        module_link

        fstab_check

        echo -n $"Loading ${FSNAME}: "

        if ! test -r /etc/ocfs.conf; then
            failure $"No configuration file /etc/ocfs.conf; loading ${FSNAME};"
            echo
            exit 1
        fi

        if test "$NETWORKING" = "no"; then
            failure $"Network is unavailable; loading ${FSNAME};"
            echo
            exit 1
        fi

        if grep "^${MODNAME} " /proc/modules >/dev/null 2>&1; then
            success $"${FSNAME} is already loaded;"
            echo
            exit 0
        fi

        # action - DO NOT REMOVE, this is to trick RH /etc/rc
        initlog -q -c "$LOAD_OCFS" && success || failure
        RETVAL=$?
        echo
        
	;;
	
    link)
	module_link
        ;;

    status)
        echo -n $"Checking if ${FSNAME} is loaded: "
        if grep "^${MODNAME} " /proc/modules >/dev/null 2>&1; then
            success $"${FSNAME} is already loaded; status"
            echo
            exit 0
        else
            failure $"${FSNAME} is not loaded; status"
            echo
            exit 1
        fi
        ;;

    stop|force-reload|restart)
        RETVAL=0
	;;

    *)
	echo "Usage: $0 {start|stop|restart|force-reload}"
        RETVAL=1
esac

exit $RETVAL
