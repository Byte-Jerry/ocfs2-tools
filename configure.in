AC_INIT(load_ocfs/load_ocfs)

PACKAGE=ocfs-tools
VERSION=1.1

AC_SUBST(PACKAGE)

# Adjust these for the software version.
MAJOR_VERSION=1
MINOR_VERSION=1
MICRO_VERSION=2
EXTRA_VERSION=PROD1

# Adjust this only to bump the RPM packaging version
RPM_VERSION=1

DIST_VERSION=$MAJOR_VERSION.$MINOR_VERSION.$MICRO_VERSION
VERSION=$DIST_VERSION-$EXTRA_VERSION

AC_SUBST(MAJOR_VERSION)
AC_SUBST(MINOR_VERSION)
AC_SUBST(MICRO_VERSION)
AC_SUBST(EXTRA_VERSION)

AC_SUBST(DIST_VERSION)
AC_SUBST(VERSION)
AC_SUBST(RPM_VERSION)

AC_CANONICAL_HOST

OCFS_PROCESSOR=

case "$host" in
  *-*-linux*)
    ;;
  *)
    AC_MSG_ERROR([This filesystem will only work on Linux])
    ;;
esac

case "$host_cpu" in
  powerpc64)
    OCFS_PROCESSOR="ppc64"
    ;;
  ia64)
    OCFS_PROCESSOR="ia64"
    ;;
  x86_64)
    OCFS_PROCESSOR="x86_64"
    ;;
  i386|i486|i586|i686|i786|k6|k7)
    OCFS_PROCESSOR="i686"
    ;;
  s390x)
    OCFS_PROCESSOR="s390x"
    ;;
  *)
    AC_MSG_ERROR([not configured for "$host_cpu"])
    ;;
esac

AC_SUBST(OCFS_PROCESSOR)

if test -z "$TOOLSARCH"; then
    case "$host_cpu" in
    x86_64|i386|ppc|ia64|s390x)
        TOOLSARCH="$host_cpu"
        ;;
    i486|i586|i686|i786|k6|k7)
        TOOLSARCH="i386"
        ;;
    powerpc64)
        TOOLSARCH="ppc"
        ;;
    *)
        AC_MSG_RESULT([not found])
        AC_MSG_ERROR([invalid or unsupported CPU type])
        ;;
    esac
fi

AC_SUBST(TOOLSARCH)

AC_PROG_CC
AC_PROG_CPP

AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_RANLIB

AC_PATH_PROG(AR, ar)

AC_HEADER_STDC
AC_C_CONST

if test "x$GCC" != "xyes"; then
  AC_MSG_ERROR(GCC is required)
fi

AC_MSG_CHECKING(for debugging)
AC_ARG_ENABLE(debug, [  --enable-debug=[yes/no]         Turn on debugging [default=no]],,enable_debug=no)
OCFS_DEBUG=
if test "x$enable_debug" = "xyes"; then
  OCFS_DEBUG=yes
fi
AC_SUBST(OCFS_DEBUG)
AC_MSG_RESULT($enable_debug)

AC_MSG_CHECKING(for memory debugging)
AC_ARG_ENABLE(memdebug, [  --enable-memdebug=[yes/no]     Turn on memory debugging [default=no]],,enable_memdebug=no)
OCFS_MEMDEBUG=
if test "x$enable_memdebug" = "xyes"; then
  OCFS_MEMDEBUG=yes
fi
AC_SUBST(OCFS_MEMDEBUG)
AC_MSG_RESULT($enable_memdebug)

AC_MSG_CHECKING(for tracing)
AC_ARG_ENABLE(trace, [  --enable-trace=[yes/no]         Turn on tracing [default=no]],,enable_trace=no)
OCFS_TRACE=
if test "x$enable_trace" = "xyes"; then
  OCFS_TRACE=yes
fi
AC_SUBST(OCFS_TRACE)
AC_MSG_RESULT($enable_trace)

COM_ERR_LIBS=
AC_CHECK_LIB(com_err, com_err, COM_ERR_LIBS=-lcom_err)
if test "x$COM_ERR_LIBS" = "x"; then
    AC_MSG_ERROR([Unable to find com_err library])
fi
AC_SUBST(COM_ERR_LIBS)

AC_C_BIGENDIAN()

AC_MSG_CHECKING(for debug executables)
AC_ARG_ENABLE(debugexe, [  --enable-debugexe=[yes/no]     Enable debug executables for library source files [default=no]],,enable_debugexe=no)
OCFS2_DEBUG_EXE=
if test "x$enable_debugexe" = "xyes"; then
    OCFS2_DEBUG_EXE=yes
fi
AC_SUBST(OCFS2_DEBUG_EXE)
AC_MSG_RESULT($enable_debugexe)

GLIB_REQUIRED_VERSION=1.2.8
GTK_REQUIRED_VERSION=1.2.8

AM_PATH_GLIB($GLIB_REQUIRED_VERSION, :,
  AC_MSG_ERROR([Glib $GLIB_REQUIRED_VERSION or better is required.]))

DEBUGOCFS2=

ocfs_tools_save_LIBS=$LIBS
LIBS="$LIBS -lncurses"
AC_CHECK_LIB(readline, readline,
  [AC_CHECK_HEADER(readline/readline.h,
    DEBUGOCFS2=yes,
    [AC_MSG_WARN([readline not found, debugfs.ocfs2 will not be built])])],
  [AC_MSG_WARN([readline not found, debugfs.ocfs2 will not be built])])
LIBS=$ocfs_tools_save_LIBS

OCFSTOOL=

AC_ARG_ENABLE(ocfstool, [  --enable-ocfstool=[yes/no]       Build GUI frontend [default=yes]],,enable_ocfstool=yes)

if test "x$enable_ocfstool" = "xyes"; then
  AM_PATH_GTK($GTK_REQUIRED_VERSION, have_gtk=yes, have_gtk=no)

  if test "x$have_gtk" = "xyes"; then
    OCFSTOOL=yes
  else
    AC_MSG_WARN([GTK+ $GTK_REQUIRED_VERSION or better not found, ocfstool will not be built])
  fi
fi

AC_SUBST(OCFSTOOL)

AC_OUTPUT([
Config.make
ocfs/debugocfs/debugocfs.8
ocfs/fsck/fsck.ocfs.8
ocfs/format/mkfs.ocfs.8
ocfs/format/tuneocfs.8
ocfs_uid_gen/ocfs_uid_gen.8
load_ocfs/load_ocfs.8
ocfstool/ocfstool.8
vendor/common/ocfs-tools.spec
ocfs2/libocfs2/ocfs2_err.et
])
